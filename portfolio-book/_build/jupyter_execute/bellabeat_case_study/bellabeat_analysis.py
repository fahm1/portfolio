#!/usr/bin/env python
# coding: utf-8

# ```{image} bellabeat_banner.png
# :align: left
# :width: 100%
# ```

# # Bellabeat Case Study
# <!-- # <span style="color:#FA8072">Bellabeat Case Study</span> -->
# <!-- !jupyter nbconvert --to markdown README.ipynb -->
# 
# **Name:** Fahmi I.  
# **Date:** June 6th, 2022
# 
# ```{tip}
# A table of contents for this notebook can be found on the top-right corner of this page. 
# ```
# 
# ---

# <!-- ## <span style="color:#FA8072">Table of Contents</span>
# 
# * [1. Introduction](#Introduction)
# * [2. Ask Phase](#Ask-Phase)
# * [3. Prepare Phase](#Prepare-Phase)
#     * [3.1 Business Task](#Business-Task)
# * [4. Process Phase](#Process-Phase)
# * [5. Analyze and Share Phase](#Analyze-and-Share-Phase)
# * [6. Act Phase](#Act-Phase)
# 
# --- -->

# ## 1. Introduction:
# 
# Bellabeat is a small high-tech manufacturer of health-focused products with dreams to become a larger player in the global [smart device](https://en.wikipedia.org/wiki/Smart_device) industry. 
# The main focus of this case study is to analyze the health data collected from smart devices to determine new growth opportunities for the company. 
# 
# Here is a brief overview the company's products:
# ````{margin}
# ```{note}
# The Bellabeat Leaf, Time, and Spring all communicate through the app to provide users with personalized recommendations and detailed statistics. 
# ```
# ````
# * __Bellabeat App:__ An mobile app that tracks users' health data and provides personalized recommendations based on the data. 
# * __Bellabeat Membership:__ A subscription service that gives members 24/7 access to personalized recommendations on nutrition, activity, sleep, health, and beauty based on their lifestyle and goals. 
# * __Leaf__: A wellness tracker that can be worn as a bracelet, necklace, or clip to record user activity, sleep, and stress. 
# * __Time__: A wellness watch that looks like a classic watch while also tracking user activity, sleep, and stress.  
# * __Spring__: A smart water bottle that can be used to track user hydration and water intake.

# ---

# ## 2. Ask-Phase:
# 
# ### 2.1 Business Task: 
# Analyze __non-Bellabeat__ smart device usage to gain insight on how consumers use their smart devices and discover trends that could be used to improve Bellabeat's marketing strategy. 
# 
# Guiding Questions:
# 1. What are some trends in smart device usage? 
# 1. How could these trends apply to Bellabeat customers?
# 1. How could these trends help influence Bellabeat's marketing strategy?
# 
# ### 2.2 Stakeholders:
# As insights from this case study will influence Bellabeat's marketing strategy, the following stakeholders will be involved:
# 
# * __Urška Sršen:__ Cofounder and Chief Creative Officer of Bellabeat
# * __Sando Mur:__ Mathematician and Bellabeat’s cofounder; key member of the Bellabeat executive team
# * __Bellabeat marketing analytics team:__ A team of data analysts responsible for collecting, analyzing, and reporting data that helps guide Bellabeat’s marketing strategy

# ---

# ## 3. Prepare Phase:
# 
# ### 3.1 Dataset Information:
# ````{margin}
# ```{note}
# The dataset is a public dataset with a CC0: Public Domain license. 
# ```
# ````
# The dataset used for this case study is the [FitBit Fitness Tracker Data](https://www.kaggle.com/datasets/arashnic/fitbit/metadata) shared by [Mobius](https://www.kaggle.com/arashnic) on [Kaggle](https://www.kaggle.com).
# 
# This Kaggle dataset contains personal fitness tracker from thirty fitbit users. Thirty eligible Fitbit users consented to the submission of personal tracker data, including minute-level output for physical activity, heart rate, and sleep monitoring. It includes information about daily activity, steps, and heart rate that can be used to explore users’ habits. 
# 
# The data was generated by respondents to a distributed survey via Amazon Mechanical Turk from March 3rd, 2016 to May 12th, 2016. Thirty eligible Fitbit users consented to the submission of personal tracker data, including minute-level output for physical activity, heart rate, and sleep monitoring.
# 
# ### 3.2 Data Description:
# 
# There are 18 CSV files in the dataset containing the various data tracked by Fitbit. The data includes quantitative measures of activity, calories burned, intensity, steps, sleep, and weight.  
# Detailed descriptions of each file and column can be found [here](https://www.fitabase.com/media/1930/fitabasedatadictionary102320.pdf).
# 
# ```{dropdown} Click here for a table with a description of each CSV file.
# | Table Name | Type | Description |
# | --- | --- | --- |
# | hourlyCalories_merged | CSV | Hourly calories burned over 31 days for 33 users |
# | dailyCalories_merged | CSV | Daily calories over 31  days for 33 users |
# | minuteCaloriesNarrow_merged | CSV | Calories burned every minute over 31 days for 33 users (every minute in single row)|
# | minuteCaloriesWide_merged | CSV | Calories burned every minute over 31 days for 33 users (every minute in single column)|
# | dailyIntensities_merged | CSV | Daily intensity over 31 days for 33 users. Measured in minutes and distance with 4 distinct categories: Sedentary, Lightly Active, Fairly Active,Very Active |
# | hourlyIntensities_merged | CSV | Hourly total and average intensity over 31 days for 33 users |
# | minuteIntensitiesNarrow_merged | CSV | Intensity recorded by minute over 31 days for 33 users (every minute in single row) |
# | minuteIntensitiesWide_merged | CSV | Intensity recorded by minute over 31 days for 33 users (every minute in single column)|
# | dailySteps_merged | CSV | Daily steps over 31 days for 33 users | 
# | hourlySteps_merged | CSV | Hourly steps over 31 days for 33 users |
# | minuteStepsNarrow_merged | CSV | Steps recorded by minute over 31 days for 33 users (every minute in single row)|
# | minuteStepsWide_merged | CSV | Steps recorded by minute over 31 days for 33 users (every minute in single column) |
# | dailyActivity_merged | CSV | Daily activity over 31 days for 33 users. Includes daily steps, distance, intensities, and calories burned |
# | sleepDay_merged | CSV| Sleep recorded by day, including count for number of sleeping periods per day, total minutes, and total time in bed |
# | minuteSleep_merged | CSV | Sleep recorded by minute for 24 users over 31 days. Values: 1 = asleep, 2 = restless, 3 = awake in bed |
# | heartrate_seconds_merged | CSV | Exact day and time heartrate logs for 7 users |
# | minuteMETsNarrow_merged | CSV | MET or metabolic equivalent of task value recorded in minutes |
# | weightLogInfo_merged | CSV | Weight and BMI recorded by day in Kg and Pounds over 30 days for 8 users |
# ```
# 
# ### 3.3 Data Integrity:
# 
# There are certainly some limitations to the dataset:
# 
# * __Sample Size:__ The dataset contains only 33 users for many of the files, while other files contain recordings from even fewer users. 
# * __Study Duration:__ Much of the data was collected for a period of just one month, therefore lacking seasonal and other temporal trends. 
# * __Completion Date:__ The data was collected in mid-2016, which is about 6 years ago now. 
# 
# Noting these limitations, the recommendations and conclusions reached in this study will have to keep in mind that the data is not completely ideal. 
# However, identifying these limitations could lead to some generalized conclusions and may encourage seeking out other third-party data sources. 
# 
# `````{admonition} __Key Takeaways:__
# :class: tip
# The data is a public FitBit dataset that tracked various users' health data including calories burned and sleep. The data is limited in that it had a small sample size, short duration, and was completed years ago. 
# `````

# ---

# ## 4. Process Phase:

# Due to the number of data files and their size, I will be using Python to process the data. 

# ### 4.1 Import Libraries and Read in Data:

# Goals:
# * see the distribution of users in the 4 intensity categories
# * see average steps and calorie burn per category
# * see what time of day the users are most active
# * see average sleep and sleep per category
# use these conclusions to advertise how bellabeat membership and usage can lead to improvements in all of these 

# Starting off by importing the libraries we will need, all of which are standard for data analysis. 

# In[2]:


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os


# We can then take a look at which data files we have available.  
# __TODO:__ change the path to be generalized

# In[3]:


os.listdir(r'C:\Users\fahmi\Documents\Portfolio\Large Files\Data_Fitbase')


# __TODO:__ use MYST md notebooks to make all of the reading in and brief overview of the dataframes into tabs to save vertical space. 

# We can now start reading in the files that we will be using in our analysis.  
# But first, we can create a simple function that will return important information about each created dataframe, such as the column names, shape, duplicate row count, and missing value count. 

# In[53]:


def df_info(df: pd.DataFrame, name: str='df'):
    '''Prints columns, shape, and null value count of a dataframe'''
    print(
    f'{name}:\n\t\
    Columns: {list(df.columns)}\n\t\
    Shape: {df.shape}\n\t\
    Duplicate rows: {df.duplicated().sum()}\n\t\
    Missing values: {df.isna().sum().sum()}'
    )


# Starting with the daily activity data, we will also create a copy of the dataframe in order to easily revert to the original data if needed:
# 
# ```{note}
# The names of the 'date' columns in each of the .csv files have already been identified using the [Fitabase description of the dataset](https://www.fitabase.com/media/1930/fitabasedatadictionary102320.pdf) in order to save time when changing the datatype of the 'date' columns from 'object' to 'datetime64[ns]'. 
# ```

# In[70]:


original_day_activity = pd.read_csv(
    r'C:\Users\fahmi\Documents\Portfolio\Large Files\Data_Fitbase/dailyActivity_merged.csv', 
    parse_dates=['ActivityDate'], infer_datetime_format=True
)
df_daily_activity = original_day_activity.copy()
df_info(df=df_daily_activity, name='daily activity')


# __TODO:__ 
# * make cells with wide dataframes wide on website
# * drop unnecessary columns when creating df

# In[64]:


df_daily_activity.head(3)


# We can then do the same with the hourly steps data:

# In[66]:


original_hour_steps = pd.read_csv(
    r'C:\Users\fahmi\Documents\Portfolio\Large Files\Data_Fitbase/hourlySteps_merged.csv',
    parse_dates=['ActivityHour'], infer_datetime_format=True
)
df_hour_steps = original_hour_steps.copy()
df_info(df=df_hour_steps, name='hourly steps')


# In[67]:


df_hour_steps.head(3)


# And the hourly calories burned data:

# In[68]:


original_hour_calories = pd.read_csv(
    r'C:\Users\fahmi\Documents\Portfolio\Large Files\Data_Fitbase/hourlyCalories_merged.csv',
    parse_dates=['ActivityHour'], infer_datetime_format=True
)
df_hour_calories = original_hour_calories.copy()
df_info(df=df_hour_calories, name='hourly calories')


# In[69]:


df_hour_calories.head(3)


# Then the daily sleep data:

# In[74]:


original_day_sleep = pd.read_csv(
    r'C:\Users\fahmi\Documents\Portfolio\Large Files\Data_Fitbase/sleepDay_merged.csv',
    parse_dates=['SleepDay'], infer_datetime_format=True
)
df_day_sleep = original_day_sleep.copy()
df_info(df=df_day_sleep, name='daily sleep')


# ```{admonition} __Duplicate Data Warning:__
# :class: warning
# We can see that there's actually 3 duplicate rows in the daily sleep data. __TODO:__ change
# ```

# In[73]:


df_day_sleep.head(3)


# And finally, the minute sleep data:

# In[75]:


original_min_sleep = pd.read_csv(
    r'C:\Users\fahmi\Documents\Portfolio\Large Files\Data_Fitbase/minuteSleep_merged.csv', 
    parse_dates=['date'], infer_datetime_format=False
)
df_min_sleep = original_min_sleep.copy().drop(columns='logId')\
                                 .rename(columns={'Id': 'id', 'date': 'date_time'})
df_info(df=df_min_sleep, name='minute sleep')


# ```{admonition} __Duplicate Data Warning:__
# :class: warning
# In the minute sleep data, we can see that there's 543 duplicate rows that we need to take care of. __TODO:__ change
# ```

# In[76]:


df_min_sleep.head(3)


# ### 4.2 Data Cleaning:
# text

# ---

# ## 5. Analyze and Share Phase:
# <!-- <a name='Analyze-and-Share-Phase'></a><h3 style="color:#FA8072">5. Analyze and Share Phase:</h3> -->

# ---

# ## 6. Act Phase:
# <!-- <a name='Act-Phase'></a><h3 style="color:#FA8072">6. Act Phase:</h3> -->

# ---

# ### Sleep Analysis

# In[19]:


df_sleep['day_of_week'] = df_sleep['date_time'].dt.day_name()
df_sleep['date'] = df_sleep['date_time'].dt.date


# In[20]:


df_sleep.head(3)


# In[21]:


df_sleep['time_diff'] = df_sleep.groupby('id')['date_time'].diff()


# In[22]:


df_sleep.head(5)


# In[23]:


df_sleep.time_diff.value_counts()


# In[24]:


df_sleep = df_sleep[df_sleep.time_diff == np.timedelta64(1, 'm')]


# In[25]:


df_info(df_sleep, 'df_sleep')


# In[26]:


def plot_sleep(df_sleep: pd.DataFrame, id: int, repeat_ylabel: bool = True):
    '''
    Plots sleep data for a given id
    
        Parameters:
            df_sleep (pd.DataFrame): Dataframe with sleep data to plot
            id (int):                ID of the user to be analyzed
            repeat_ylabel (bool):    Whether to repeat y-axis label
    '''

    WEEK_ORDER= ['Monday', 'Tuesday', 'Wednesday',
                 'Thursday', 'Friday', 'Saturday', 'Sunday']
    SLEEP_STATE = ['Asleep', 'Restless', 'Awake in Bed']

    fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(22, 8), facecolor='w')
    df_id = df_sleep.loc[df_sleep.id == id]
    
    for idx, ax in enumerate(axes):

        minutes = df_id.loc[df_id.value == idx + 1].groupby('day_of_week')['value'].sum()
        days = df_id.groupby('date').day_of_week.value_counts()

        days_count = {}
        for i in range(len(days)):
            days_count[days.index[i][1]] = days_count.get(days.index[i][1], 0) + 1

        for i in minutes.index:
            minutes[i] /= days_count[i]

        sns.barplot(
            orient='h', x=minutes.values, y=minutes.index, 
            palette='icefire', order=WEEK_ORDER, alpha=0.8, ax=ax
        )

        if not repeat_ylabel and idx > 0:
            ax.set_yticks([])
        ax.yaxis.set_tick_params(length=0)
        ax.set_ylabel('')
        ax.tick_params(axis='both', labelsize=14)
        ax.set_xlabel(xlabel=f'Minutes {SLEEP_STATE[idx]}', fontsize=14, labelpad=10)

        ax.set_title(f'Minutes {SLEEP_STATE[idx]} by Day of Week',
                    fontsize=16, loc='left', pad=20)

        ax.grid(axis='x', linestyle='--', alpha=0.8)
        sns.despine()
    
    fig.suptitle('Average Minutes Spent in Each Sleep State by Day of the Week', 
                 fontsize=22, x=0.123, y=1.05, ha='left')


# In[27]:


ids = df_sleep.id.unique()
len(ids)


# In[28]:


plot_sleep(df_sleep, id=ids[0])


# In[ ]:




